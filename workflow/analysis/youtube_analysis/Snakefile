"""
Snakemake workflow for YouTube analysis pipeline.
Analyzes YouTube video citations from the AI search arena data.
"""

# Configuration
configfile: "config/config.yaml"

# Define paths
CITATIONS_DATA = config["citations_data_path"]
INTERMEDIATE_DIR = config["intermediate_dir"]

# Target rule - what we want to produce
rule all:
    input:
        # Phase 1: YouTube URL extraction
        f"{INTERMEDIATE_DIR}/youtube_citations.parquet",
        # Phase 2: Video metadata collection
        f"{INTERMEDIATE_DIR}/video_metadata.parquet",
        # Phase 3: Channel data extraction
        f"{INTERMEDIATE_DIR}/unique_channels.parquet",
        # Phase 4: Channel metadata collection
        f"{INTERMEDIATE_DIR}/channel_metadata.parquet",
        # Phase 5: Final integrated dataset
        f"{INTERMEDIATE_DIR}/youtube_analysis_dataset.parquet"

# Phase 1: Extract YouTube URLs and video IDs
rule extract_youtube_urls:
    input:
        citations=CITATIONS_DATA
    output:
        f"{INTERMEDIATE_DIR}/youtube_citations.parquet"
    script:
        "scripts/extract_youtube_urls.py"

# Phase 2: Fetch video metadata from YouTube API
rule fetch_video_metadata:
    input:
        youtube_citations=f"{INTERMEDIATE_DIR}/youtube_citations.parquet"
    output:
        video_metadata=f"{INTERMEDIATE_DIR}/video_metadata.parquet",
        api_responses_dir=directory(f"{INTERMEDIATE_DIR}/video_api_responses")
    params:
        api_key=config["youtube_api_key_env_var"],
        batch_size=config["api_batch_size"],
        rate_limit_delay=config["rate_limit_delay"]
    script:
        "scripts/fetch_video_metadata.py"

# Phase 3: Extract unique channel IDs
rule extract_channel_data:
    input:
        video_metadata=f"{INTERMEDIATE_DIR}/video_metadata.parquet"
    output:
        f"{INTERMEDIATE_DIR}/unique_channels.parquet"
    script:
        "scripts/extract_channel_data.py"

# Phase 4: Fetch channel metadata from YouTube API
rule fetch_channel_metadata:
    input:
        unique_channels=f"{INTERMEDIATE_DIR}/unique_channels.parquet"
    output:
        channel_metadata=f"{INTERMEDIATE_DIR}/channel_metadata.parquet",
        api_responses_dir=directory(f"{INTERMEDIATE_DIR}/channel_api_responses")
    params:
        api_key=config["youtube_api_key_env_var"],
        batch_size=config["api_batch_size"],
        rate_limit_delay=config["rate_limit_delay"]
    script:
        "scripts/fetch_channel_metadata.py"

# Phase 5: Integrate all data into final analysis dataset
rule integrate_youtube_data:
    input:
        youtube_citations=f"{INTERMEDIATE_DIR}/youtube_citations.parquet",
        video_metadata=f"{INTERMEDIATE_DIR}/video_metadata.parquet",
        channel_metadata=f"{INTERMEDIATE_DIR}/channel_metadata.parquet"
    output:
        f"{INTERMEDIATE_DIR}/youtube_analysis_dataset.parquet"
    script:
        "scripts/integrate_youtube_data.py"